pip install python-telegram-bot
import logging
from telegram import Update, LabeledPrice, ShippingOption
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, PreCheckoutQueryHandler, ShippingQueryHandler

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Replace with your bot token
TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'

# Replace with your payment provider token
PAYMENT_PROVIDER_TOKEN = 'YOUR_PAYMENT_PROVIDER_TOKEN'

def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('Welcome! Use /topup to add credit to your account.')

def topup(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    title = "Top-up Credit"
    description = "Add credit to your account"
    payload = "Custom-Payload"
    currency = "USD"
    prices = [LabeledPrice("Top-up", 1000)]  # Amount in cents

    context.bot.send_invoice(
        chat_id, title, description, payload, PAYMENT_PROVIDER_TOKEN, currency, prices
    )

def shipping_callback(update: Update, context: CallbackContext) -> None:
    query = update.shipping_query
    if query.invoice_payload != 'Custom-Payload':
        query.answer(ok=False, error_message="Something went wrong...")
        return

    options = [ShippingOption('1', 'Shipping Option A', [LabeledPrice('Shipping Option A', 100)])]
    query.answer(ok=True, shipping_options=options)

def precheckout_callback(update: Update, context: CallbackContext) -> None:
    query = update.pre_checkout_query
    if query.invoice_payload != 'Custom-Payload':
        query.answer(ok=False, error_message="Something went wrong...")
    else:
        query.answer(ok=True)

def successful_payment_callback(update: Update, context: CallbackContext) -> None:
    update.message.reply_text("Thank you for your payment! Your account has been topped up.")

def main() -> None:
    updater = Updater(TOKEN)

    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("topup", topup))
    dispatcher.add_handler(ShippingQueryHandler(shipping_callback))
    dispatcher.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    dispatcher.add_handler(MessageHandler(Filters.successful_payment, successful_payment_callback))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()